import Default from './browser';
declare const _default: {
    fetch: typeof globalThis.fetch;
    WebSocket: {
        new (address: string | URL, ...args: any): {
            binaryType: BinaryType;
            readonly bufferedAmount: number;
            readonly extensions: string;
            onclose: (this: WebSocket, ev: CloseEvent) => any;
            onerror: (this: WebSocket, ev: Event) => any;
            onmessage: (this: WebSocket, ev: MessageEvent<any>) => any;
            onopen: (this: WebSocket, ev: Event) => any;
            readonly protocol: string;
            readonly readyState: number;
            readonly url: string;
            close(code?: number, reason?: string): void;
            send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;
            readonly CONNECTING: 0;
            readonly OPEN: 1;
            readonly CLOSING: 2;
            readonly CLOSED: 3;
            addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof WebSocketEventMap>(type: K_1, listener: (this: WebSocket, ev: WebSocketEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            dispatchEvent(event: Event): boolean;
        };
        readonly CONNECTING: 0;
        readonly OPEN: 1;
        readonly CLOSING: 2;
        readonly CLOSED: 3;
    };
    Blob: {
        new (blobParts?: BlobPart[], options?: BlobPropertyBag): Blob;
        prototype: Blob;
    };
};
export default _default;
export declare const fetch: typeof Default.fetch;
export declare const WebSocket: typeof Default.WebSocket;
export declare const Blob: typeof Default.Blob;
