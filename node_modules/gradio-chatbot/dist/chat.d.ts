import type { MergeExclusive } from 'type-fest';
import spaces from './spaces.json';
export { spaces };
export declare const generateHash: () => string;
type GradioAutoOptions = MergeExclusive<{
    url?: string;
}, {
    endpoint?: string;
}> & {
    historySize?: number;
    fnIndex?: number;
    args?: unknown[];
    inputIndex?: number;
    parseHtml?: boolean;
    session_hash?: string;
    hf_token?: string;
};
type ChatOptions = {
    onMessage?: (msg: string) => void;
    onError?: (error: string) => void;
};
export declare class GradioChatBot {
    private options;
    history: any[];
    session_hash: string;
    private instance_map;
    constructor(opts?: string | GradioAutoOptions);
    private parseInputs;
    private html2Markdown;
    reset(): Promise<void>;
    chat(input: string, options?: ChatOptions): Promise<string>;
}
