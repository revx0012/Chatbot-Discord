#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = void 0;
const readline = __importStar(require("node:readline/promises"));
const node_process_1 = require("node:process");
const __1 = require("../");
class Spinner {
    tick = 300;
    processing = false;
    index = 0;
    tid;
    chars = {
        output: ['-', '\\', '|', '/'],
        input: ['â”‚', ' '],
    };
    currentMode = 'output';
    setMode(mode) {
        this.currentMode = mode;
        if (mode === 'input') {
            this.tick = 900;
        }
        else {
            this.tick = 300;
        }
    }
    start() {
        this.processing = true;
        if (this.tid)
            return;
        this.spin();
    }
    spin() {
        this.tid = setTimeout(() => {
            if (!this.processing)
                return;
            const chars = this.chars[this.currentMode];
            this.index = ++this.index % chars.length;
            const char = chars[this.index];
            process.stdout.write(char);
            process.stdout.moveCursor(-1, 0);
            this.spin();
        }, this.tick);
    }
    write(text) {
        if (text.charAt(0) === '\n') {
            process.stdout.write(' ');
        }
        process.stdout.write(text);
    }
    stop() {
        this.processing = false;
        this.tid = null;
    }
}
class RL {
    options;
    rl;
    constructor(options) {
        this.options = options;
        this.rl = readline.createInterface(options);
    }
    async question(prompt) {
        this.rl.setPrompt(prompt);
        this.rl.prompt(true);
        const lines = [];
        let closeTid;
        for await (const input of this.rl) {
            clearTimeout(closeTid);
            closeTid = setTimeout(() => {
                if (input === '') {
                    process.stdout.write('\n');
                }
                this.close();
            }, 500);
            lines.push(input);
        }
        return lines.join('\n');
    }
    close() {
        this.rl?.close();
        this.rl = null;
    }
}
async function cli() {
    const model = process.argv[2] || '0';
    if (!/^https?:\/\//.test(model) && !__1.spaces[model]) {
        process.stdout.write(`> An tool that can automatically convert huggingface and modelscope spaces to free API.

Usage:
npx gradio-chatbot
npx gradio-chatbot Index
npx gradio-chatbot URL

`);
        process.stdout.write('Index\tSpaces URL\n');
        process.stdout.write(__1.spaces.map((space, index) => `${index}\t${space?.url || space}`).join('\n'));
        process.stdout.write(`

More information: https://github.com/weaigc/gradio-chatbot
`);
        return;
    }
    const bot = new __1.GradioChatBot(model);
    let lastLength = 0;
    const spinner = new Spinner();
    while (true) {
        const prompt = await new RL({ input: node_process_1.stdin, output: node_process_1.stdout }).question('Man: ');
        if (!prompt.trim())
            break;
        spinner.start();
        spinner.write('Bot: ');
        const response = await bot.chat(prompt, {
            onMessage: (msg) => {
                spinner.write(msg.slice(lastLength));
                lastLength = msg.length;
            },
        });
        spinner.write(response.slice(lastLength));
        lastLength = 0;
        spinner.write('\n');
        spinner.stop();
    }
}
exports.cli = cli;
cli();
